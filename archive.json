{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-03-18T01:52:17.080111+00:00",
  "repo": "LPardue/draft-pardue-moq-qlog-moq-events",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOOBS9Ss6sMMO2",
      "title": "Length field in control message events and messages",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/issues/1",
      "state": "CLOSED",
      "author": "mengelbart",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "`MOQTControlMessageCreated`, `MOQTControlMessageParsed`, and all the `MOQTControlMessage` types have optional length fields. I think it would be enough to have it in the created/parsed events.\n\nSince it is part of the MoQ message types, should we also make it mandatory?",
      "createdAt": "2025-03-01T12:43:41Z",
      "updatedAt": "2025-03-02T18:27:45Z",
      "closedAt": "2025-03-02T18:27:45Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "body": "You've spotted that there was duplicate/redundant `length` fields in the MOQTControlMessage concrete types. https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/11 fixes that up.\n\nGenerally I've tried to follow the model of HTTP/3 frames, which has worked well in my experience, see  https://quicwg.org/qlog/draft-ietf-quic-qlog-h3-events.html#name-frame_created and https://quicwg.org/qlog/draft-ietf-quic-qlog-h3-events.html#name-http3frame.\n\nWhile the `length` field is mandatory for the wire image - its debatable how much its useful for qlog. In my experience, we benefit more from the semantic content of a field, rather than the properties of it like length. Reducing log size by omitting fields is a useful technique for a few reasons (storage and processing). \n\n",
          "createdAt": "2025-03-01T21:09:53Z",
          "updatedAt": "2025-03-01T21:09:53Z"
        },
        {
          "author": "mengelbart",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds good. I think we can close this one with #11, then.",
          "createdAt": "2025-03-02T18:21:43Z",
          "updatedAt": "2025-03-02T18:21:43Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "I_kwDOOBS9Ss6sMM1m",
      "title": "Control message stream ID",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/issues/2",
      "state": "CLOSED",
      "author": "mengelbart",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Control messages are always sent on a bidirectional stream, and opening more than one bidirectional stream may be treated as a protocol violation (https://datatracker.ietf.org/doc/html/draft-ietf-moq-transport-08#section-3.3). Thus, the stream ID should always be 0. Do we still need/want it, or can we remove it or make it optional?",
      "createdAt": "2025-03-01T12:48:43Z",
      "updatedAt": "2025-03-01T20:22:33Z",
      "closedAt": "2025-03-01T20:22:32Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "body": "My thinking here is that when using WebTransport, there are no guarantees what QUIC stream ID is used for the control channel. Therefore, we should provide information to make it explicit.",
          "createdAt": "2025-03-01T15:25:54Z",
          "updatedAt": "2025-03-01T15:25:54Z"
        },
        {
          "author": "mengelbart",
          "authorAssociation": "COLLABORATOR",
          "body": "Makes sense. I didn't think about WebTransport. ",
          "createdAt": "2025-03-01T20:22:32Z",
          "updatedAt": "2025-03-01T20:22:32Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOOBS9Ss6sMSzV",
      "title": "Group and Subgroup IDs in SubgroupObject events",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/issues/4",
      "state": "CLOSED",
      "author": "mengelbart",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I think it would be useful to have group ID and subgroup ID included in the MOQTSubgroupObjectCreated and MOQTSubgroupObjectParsed events. It is probably not strictly necessary because one can always find them using the Stream ID and the subgroup header that was sent on the same Stream ID, but that sounds more complicated to process.",
      "createdAt": "2025-03-01T13:36:12Z",
      "updatedAt": "2025-03-01T20:59:23Z",
      "closedAt": "2025-03-01T20:59:23Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "body": "Yeah, having these as optional fields sounds useful!",
          "createdAt": "2025-03-01T15:31:42Z",
          "updatedAt": "2025-03-01T15:31:42Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOOBS9Ss6sMUxA",
      "title": "What is owner used for?",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/issues/5",
      "state": "CLOSED",
      "author": "mengelbart",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I don't understand the use of the `Owner` type.",
      "createdAt": "2025-03-01T13:43:31Z",
      "updatedAt": "2025-03-02T20:42:23Z",
      "closedAt": "2025-03-02T18:53:12Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "body": "The general pattern is other qlog docs is that something like \"Parameter set\" is one event, and the owner field declares whether that is because you set them locally or because a peer sent them to you. \n\nThat might not be right for MoQ but I wanted to follow convention.",
          "createdAt": "2025-03-01T15:31:02Z",
          "updatedAt": "2025-03-01T15:31:02Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "body": "For reference, see HTTP/3 which I borrowed this from https://quicwg.org/qlog/draft-ietf-quic-qlog-h3-events.html#name-stream_type_set",
          "createdAt": "2025-03-01T21:11:25Z",
          "updatedAt": "2025-03-01T21:11:25Z"
        },
        {
          "author": "mengelbart",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, this sounds useful. Currently, the type is only used in the `stream_type_set` event and I was wondering if the owner can be known from the stream type/stream ID, but I just learned from [RFC 9308](https://www.rfc-editor.org/rfc/rfc9308.html#section-4) that this may not always be true.",
          "createdAt": "2025-03-02T18:53:12Z",
          "updatedAt": "2025-03-02T18:53:12Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "body": "Yeah so IME it's useful to have log lines that are as stateless as possible. While it's jot too hard to infer details from stream ID, it puts an onus on the parsing tool to know that. Groping for a `\"owner\": \"remote\"` can be a little more consistent, stateless and simple",
          "createdAt": "2025-03-02T20:42:22Z",
          "updatedAt": "2025-03-02T20:42:22Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOOBS9Ss6sNS4G",
      "title": "Dealing with MoQ sessions (and potential pooling)",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/issues/12",
      "state": "OPEN",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "In theory, its possible to support different MoQ sessions in a single QUIC connection that is using WebTransport. \n\nOur awkwardly named \"[Usage with QUIC](https://lpardue.github.io/draft-pardue-moq-qlog-moq-events/draft-pardue-moq-qlog-moq-events.html#name-usage-with-quic)\" section has some text related to this (sort of)\n\n> If used without QUIC events, it is recommended that the implementation assign a globally unique identifier to each MOQT session. This ID can then be used as the value of the qlog \"group_id\" field, as well as the qlog filename or file identifier, potentially suffixed by the vantagepoint type (For example, abcd1234_server.qlog would contain the server-side trace of the connection with GUID abcd1234).\n\nI say sort of, because even with QUIC events, its probably useful to be able to assign MoQ events to a session.\n\nIn the absence of a qlog for WebTransport, I'm not sure _exactly_ what to do at this stage and suspect we might want to punt for now until some experience.\n\nSpecifically, each MoQ qlog event can (via the [abstract base class](https://quicwg.org/qlog/draft-ietf-quic-qlog-main-schema.html#section-7)) set a `group_id` (not to be confused with MoQ groups). So for instance, we could have something like MOQTSessionCreated / MOQTSessionTerminated events, to make it explicit about the lifetime of the session and within them uniquely identify the group that was created. Then, each related event is marked with that identifier in the base `group_id`.\n\nAnother idea is to just do this implicitly by relying on stream IDs (and for datagrams, the quarter stream ID) and relying on events from the QUIC and HTTP/3 qlog to \"tie\" things together more implicility. I don't like this idea much since the locality of log entries is not guaranteed, and stateful parsing of logs add friction to log processing. For example, if you want to \"give me all the data and control messages for a session\" its a lot easier if you can just grep for a field like `\"group_id\": \"mycoolsession\"`",
      "createdAt": "2025-03-01T21:31:32Z",
      "updatedAt": "2025-03-01T21:31:32Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 13,
      "id": "I_kwDOOBS9Ss6sNUN3",
      "title": "Event for control stream creation",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/issues/13",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "In the absence of qlog for WebTransport, it is hard to know when the MOQT client stream has been opened. We could add a specific event, or blend it into the stream_type_set event.\n\nAlso in non-webtransport modes, it might be useful any way.",
      "createdAt": "2025-03-01T21:44:38Z",
      "updatedAt": "2025-03-13T18:34:07Z",
      "closedAt": "2025-03-13T18:34:07Z",
      "comments": [
        {
          "author": "lminiero",
          "authorAssociation": "NONE",
          "body": "+1 on blending it with `stream_type_set`, since it could simply be a new `MOQTStreamType` value.",
          "createdAt": "2025-03-12T10:48:17Z",
          "updatedAt": "2025-03-12T10:48:17Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "I_kwDOOBS9Ss6sNeRB",
      "title": "Dealing with MOQT tracknamespace tuples",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/issues/14",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The MOQT doc defines these as a `tuple` type, and I still don't fully grok how people want to use them. It's perhaps up in the air in the MoQ group so I've punted on describing them in qlog. However, many events carry a track namespace and so it will be important to figure out a nice format for log serialization .",
      "createdAt": "2025-03-01T23:23:51Z",
      "updatedAt": "2025-03-12T00:13:44Z",
      "closedAt": "2025-03-12T00:13:44Z",
      "comments": [
        {
          "author": "mengelbart",
          "authorAssociation": "COLLABORATOR",
          "body": "I implemented tuples as a list of byte arrays. I do some manual checking to enforce the 32 elements restriction. I think logging them as an array would be useful. However, MoQT does not define the encoding and leaves it open to the application. One option would be to log them as RawInfo as we currently do for `reason_phrase`. If the namespace elements are strings, logging those strings would probably be more useful, but only works if we know how they are encoded.",
          "createdAt": "2025-03-03T15:29:32Z",
          "updatedAt": "2025-03-03T15:29:32Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "body": "Thanks for the explanation. \n\nWe sort of have a similar issue for the HTTP headers in the h3 qlog schema. It's likely that the values are \"safe\" strings but there is no guarantee.\n\nI suspect we'll benefit from supporting both encodings in moqt qlog. A log producer will know itself if it is generating a compatible string, or if its bytes that need hex encoding. The consumer can tell from the log which type it is.  \n\nThis approach allow would allow for human-readablilty of track names / namespaces when possible, which can greatly aid debugging.",
          "createdAt": "2025-03-03T16:44:18Z",
          "updatedAt": "2025-03-03T16:44:18Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOOBS9Ss6sWahw",
      "title": "Reason phrases",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/issues/15",
      "state": "CLOSED",
      "author": "mengelbart",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, the draft defines `reason_phrase` fields of error messages as RawInfo. I am not sure if the encoding of reason phrases is defined anywhere in the MoQT draft, but I assume it would be useful to log them as strings instead of hex-strings if possible.",
      "createdAt": "2025-03-03T15:22:22Z",
      "updatedAt": "2025-03-03T21:53:28Z",
      "closedAt": "2025-03-03T21:48:15Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "body": "Good spot. I was trying to copy the other qlog specs but I think I did it a little wrong. Let's look at QUIC's CONNECTION_CLOSE frame https://quicwg.org/qlog/draft-ietf-quic-qlog-quic-events.html#section-8.13.19\n\n```\nErrorSpace = \"transport\" /\n             \"application\"\n\nConnectionCloseFrame = {\n    frame_type: \"connection_close\"\n    ? error_space: ErrorSpace\n    ? error_code: $TransportError /\n                  CryptoError /\n                  $ApplicationError /\n                  uint64\n    ? reason: text\n    ? reason_bytes: hexstring\n\n    ; when error_space === \"transport\"\n    ? trigger_frame_type: uint64 /\n                          text\n}\n```\n\nthat has both `reason` and `reason_bytes` and some text to explain why someone might want to use one or the other. We should probably emulate this design.",
          "createdAt": "2025-03-03T16:50:39Z",
          "updatedAt": "2025-03-03T16:50:39Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "body": "I added a comment onto https://github.com/moq-wg/moq-transport/issues/273#issuecomment-2695646437 about reason phrase encoding",
          "createdAt": "2025-03-03T21:53:27Z",
          "updatedAt": "2025-03-03T21:53:27Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOOBS9Ss6tqSVx",
      "title": "Name of parameters property is inconsistent across different messages",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/issues/22",
      "state": "CLOSED",
      "author": "lminiero",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I see #20 solved some ambiguities on how parameters are serialized, but I think the draft still has inconsistencies in how the array is named across different messages. `MOQTAnnounce` has `subscribe_parameters`, for instance, which seems incorrect; at the same time, `MOQTFetch` has `parameters`, but `MOQTFetchOk` has `subscribe_parameters`, which is confusing. A way to simplify that may be to simply always call it `parameters`, except in the setup messages (which are indeed different since they're `MOQTSetupParameter`).",
      "createdAt": "2025-03-12T10:53:11Z",
      "updatedAt": "2025-03-13T18:37:26Z",
      "closedAt": "2025-03-13T18:37:25Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "body": "I think this is likely a copy / paste error by me when first populating the document. Generally, as a convention I'd prefer to maintain consistency of field names between the protocol document and the qlog doc - that reduces some of the arbitrary nature of naming, which makes it easier to spot mistakes like this. I'll make a pass and ensure all control messages that contain parameters of either kind use a field name that is consistent with the MOQT protocol definition.",
          "createdAt": "2025-03-12T21:57:50Z",
          "updatedAt": "2025-03-12T21:57:50Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "body": "I've landed a PR that made it consistent within this specs rules. I suspect MOQT churn a little in this area but we can't predict the future. Always happen to reopen or create a new ticket to deal with MOQT change tracking ",
          "createdAt": "2025-03-13T18:37:25Z",
          "updatedAt": "2025-03-13T18:37:25Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "I_kwDOOBS9Ss6tqVlQ",
      "title": "Add extension_payload?",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/issues/23",
      "state": "OPEN",
      "author": "lminiero",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The events related to objects have the `extension_headers_length` property and, optionally, an array of `MOQTExtensionHeader`. The latest versions of the MoQT draft, though, don't force you to parse extensions anymore, since there's just an extensions length property if you want to send extensions along as you do with the payload. As such, it may make sense to have an optional `extension_payload: RawInfo` property as well, to log the extensions blob as we do with the payload using `object_payload`, for those implementations that don't parse extensions in place.",
      "createdAt": "2025-03-12T10:58:35Z",
      "updatedAt": "2025-03-12T22:13:20Z",
      "closedAt": null,
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "body": "Sounds like a reasonable idea",
          "createdAt": "2025-03-12T22:13:19Z",
          "updatedAt": "2025-03-12T22:13:19Z"
        }
      ]
    },
    {
      "number": 28,
      "id": "I_kwDOOBS9Ss6uLHIu",
      "title": "Should the parameters field in messages be optional in order to simplify empty parameter cases",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/issues/28",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The events that contain parameters (defined as of https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/commit/da1b175d36d6dda538ca4a43ceacd88ad89af1e8) do so as a mandatory array \n\nIgnoring the name of the parameter field, all parameter carrying events have something like this\n\n```\nMOQTClientSetupMessage = {\n  type: \"client_setup\"\n  number_of_support_versions: uint64\n  supported_versions: [* uint64]\n  number_of_parameters: uint64\n  setup_parameters: [* $MOQTSetupParameter]\n}\n```\nthis means that technically all serialized logs need to include the field even if the array is empty. Using the example above, we'd have something like \n\n```\n\u001e{\"time\":0.167678,\"name\":\"moqt:control_message_created\",\"data\":{\"stream_id\":0,\"length\":19,\"message\":{\"type\":\"client_setup\",\"number_of_supported_versions\":1,\"supported_versions\":[4278190088],\"number_of_parameters\":0,\"setup_parameters\":[]}}}\n```\n\n\nI hit an interop issue parsing @mengelbart's qlogs, which omitted the parameters field when the number of parameters was 0. Hence the question, should we just make the field optional to allow omitting it?",
      "createdAt": "2025-03-15T14:27:55Z",
      "updatedAt": "2025-03-17T02:24:05Z",
      "closedAt": "2025-03-17T02:24:05Z",
      "comments": [
        {
          "author": "mengelbart",
          "authorAssociation": "COLLABORATOR",
          "body": "Good point. I don't know why I interpreted the field as optional. I'm happy with making it optional, but can also live with the empty list. Should be easy to fix in my implementation.",
          "createdAt": "2025-03-16T01:08:33Z",
          "updatedAt": "2025-03-16T01:08:33Z"
        }
      ]
    },
    {
      "number": 29,
      "id": "I_kwDOOBS9Ss6uNaTD",
      "title": "typo: number_of_support_versions should be number_of_supported_versions",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/issues/29",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-16T03:56:03Z",
      "updatedAt": "2025-03-17T01:06:44Z",
      "closedAt": "2025-03-17T01:06:43Z",
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 3,
      "id": "PR_kwDOOBS9Ss6NCBb3",
      "title": "Update datagram object and status messages",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/3",
      "state": "MERGED",
      "author": "mengelbart",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Status was removed from datagram objects and the extensions were added to status datagrams.",
      "createdAt": "2025-03-01T12:57:57Z",
      "updatedAt": "2025-03-01T20:53:49Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "58ca21bbd23c00a66ad36674bf068b4a397e39a6",
      "headRepository": "mengelbart/draft-pardue-moq-qlog-moq-events",
      "headRefName": "update-datagram-events",
      "headRefOid": "8e693a1a6e48487ff8e841981662830d96e9df39",
      "closedAt": "2025-03-01T20:53:49Z",
      "mergedAt": "2025-03-01T20:53:49Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "08c041cc82fc402ad87a0b4e9dbcd9fbe89d6f80"
      },
      "comments": [
        {
          "author": "mengelbart",
          "authorAssociation": "COLLABORATOR",
          "body": "I also updated the extension_count, which was changed to the total length of all extensions in bytes,",
          "createdAt": "2025-03-01T13:39:02Z",
          "updatedAt": "2025-03-01T13:39:02Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 6,
      "id": "PR_kwDOOBS9Ss6NCKCJ",
      "title": "Make session uri mandatory, remove optional length",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/6",
      "state": "MERGED",
      "author": "mengelbart",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is the same as, e.g., reason_phrase in the error messages.",
      "createdAt": "2025-03-01T14:00:51Z",
      "updatedAt": "2025-03-01T20:56:53Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "58ca21bbd23c00a66ad36674bf068b4a397e39a6",
      "headRepository": "mengelbart/draft-pardue-moq-qlog-moq-events",
      "headRefName": "session-uri-length",
      "headRefOid": "d6b883664e9b044a9952ca5568cb82792c3c2e41",
      "closedAt": "2025-03-01T20:56:52Z",
      "mergedAt": "2025-03-01T20:56:52Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "27d4fedeed25790e0fa6a2ff051be2b6ea054864"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 7,
      "id": "PR_kwDOOBS9Ss6NCKm9",
      "title": "Fetch Ok has group order instead of expires",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/7",
      "state": "MERGED",
      "author": "mengelbart",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-01T14:06:20Z",
      "updatedAt": "2025-03-01T20:58:41Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "58ca21bbd23c00a66ad36674bf068b4a397e39a6",
      "headRepository": "mengelbart/draft-pardue-moq-qlog-moq-events",
      "headRefName": "fetch-ok",
      "headRefOid": "19f7e9a207f35f08f13625623b74a8051e57248a",
      "closedAt": "2025-03-01T20:58:41Z",
      "mergedAt": "2025-03-01T20:58:41Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "a41baa5faad723016e572099021c6afb9bfb760b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 8,
      "id": "PR_kwDOOBS9Ss6NCK8G",
      "title": "Fix typos",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/8",
      "state": "MERGED",
      "author": "mengelbart",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-01T14:09:25Z",
      "updatedAt": "2025-03-01T15:29:00Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "58ca21bbd23c00a66ad36674bf068b4a397e39a6",
      "headRepository": "mengelbart/draft-pardue-moq-qlog-moq-events",
      "headRefName": "typos",
      "headRefOid": "2e7f36cad5a7c69e1a7dbddedc9f096c80ba6342",
      "closedAt": "2025-03-01T15:29:00Z",
      "mergedAt": "2025-03-01T15:29:00Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "211116b01dc71acca0e2ec52bbdffaf02f7f20eb"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 9,
      "id": "PR_kwDOOBS9Ss6NCLNa",
      "title": "Add myself as co-author",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/9",
      "state": "MERGED",
      "author": "mengelbart",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-01T14:11:51Z",
      "updatedAt": "2025-03-01T15:27:30Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "58ca21bbd23c00a66ad36674bf068b4a397e39a6",
      "headRepository": "mengelbart/draft-pardue-moq-qlog-moq-events",
      "headRefName": "author",
      "headRefOid": "cf44badddab6f0c1791a56ec5ec9171f163d23b6",
      "closedAt": "2025-03-01T15:27:30Z",
      "mergedAt": "2025-03-01T15:27:30Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "3f952af818e5c188a25dc87d7a2d9f035337591b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 10,
      "id": "PR_kwDOOBS9Ss6NC0Ed",
      "title": "Add group and subgroup IDs to subgroup objects",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/10",
      "state": "MERGED",
      "author": "mengelbart",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #4 ",
      "createdAt": "2025-03-01T20:20:59Z",
      "updatedAt": "2025-03-01T20:59:22Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "211116b01dc71acca0e2ec52bbdffaf02f7f20eb",
      "headRepository": "mengelbart/draft-pardue-moq-qlog-moq-events",
      "headRefName": "add-group-and-subgroup-id",
      "headRefOid": "42b610eb5263094ec96e44dafdefc5d7305d5b9b",
      "closedAt": "2025-03-01T20:59:22Z",
      "mergedAt": "2025-03-01T20:59:22Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "fd8572759f2a36894d0f05228f327c0d9271bf42"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 11,
      "id": "PR_kwDOOBS9Ss6NC4i7",
      "title": "Remove redundant length field in concrete control message types",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/11",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Part of #1.",
      "createdAt": "2025-03-01T21:05:31Z",
      "updatedAt": "2025-03-02T18:27:44Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "fd8572759f2a36894d0f05228f327c0d9271bf42",
      "headRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "headRefName": "remove-length-from-concrete-control-message",
      "headRefOid": "e08a551058a339167d851685257e73788b254679",
      "closedAt": "2025-03-02T18:27:44Z",
      "mergedAt": "2025-03-02T18:27:44Z",
      "mergedBy": "mengelbart",
      "mergeCommit": {
        "oid": "c98c92ab3056d378dfbbf4b9e98c0cf5bb3d21b0"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 16,
      "id": "PR_kwDOOBS9Ss6NL3Iy",
      "title": "Make object datagram created payload optional",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/16",
      "state": "MERGED",
      "author": "mengelbart",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It is already mandatory for the object datagram created event and since status datagrams now have their own type, there should always be a payload.",
      "createdAt": "2025-03-03T17:28:19Z",
      "updatedAt": "2025-03-03T21:47:52Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "5c89712698bbdf022cc6cc1a82c65d4bc0e49cb2",
      "headRepository": "mengelbart/draft-pardue-moq-qlog-moq-events",
      "headRefName": "object-datagra-parsed-payload",
      "headRefOid": "e3e6eb580a719505c0b9ded29446d659ada23e8d",
      "closedAt": "2025-03-03T21:47:52Z",
      "mergedAt": "2025-03-03T21:47:52Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "949d20436bd584eee29744f14900eaed7b5af0bc"
      },
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "body": "So I've been a bit inconsistent through this document. In other qlog documents, the pattern tends to be to have an optional `raw: RawInfo` field that allows for logging of bytes. The rationale being that while the wire image needs to carry mandatory fields, logging often doesn't need or want to for size and data minimization reasons.\r\n\r\nMy mistake has been to approach optional logging by mandating a `raw` field and allowing the optional internal fields to be omitted. But that just means that logs get full up with empty raw fields, which is sort of pointless. I'd rather we make raw field consistently optional. In addition, where it makes sense, allow logging a specific field for strings or hex-encoded bytestrings so they are more easily consumed.",
          "createdAt": "2025-03-03T21:02:43Z",
          "updatedAt": "2025-03-03T21:02:43Z"
        },
        {
          "author": "mengelbart",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh, that makes sense, too. And it is also what the subgroup and fetch objects already do. I'll update the PR to make it optional for the created event instead.",
          "createdAt": "2025-03-03T21:24:09Z",
          "updatedAt": "2025-03-03T21:24:09Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOOBS9Ss6eRiV_",
          "commit": {
            "abbreviatedOid": "e3e6eb5"
          },
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-03T21:33:17Z",
          "updatedAt": "2025-03-03T21:33:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOOBS9Ss6NM11_",
      "title": "Try to add CDDL checks and CI",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/17",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I don't like duplicating the cddl_validate.sh script but I'm too lazy to work out how to change the qlog repo to allow defining a path to the main schema.",
      "createdAt": "2025-03-03T19:39:25Z",
      "updatedAt": "2025-03-03T19:57:53Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "c98c92ab3056d378dfbbf4b9e98c0cf5bb3d21b0",
      "headRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "headRefName": "validation",
      "headRefOid": "c11529c82f0f1bded93fd6ea30ca79b256a4d072",
      "closedAt": "2025-03-03T19:57:48Z",
      "mergedAt": "2025-03-03T19:57:48Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "c1a6db6f2ea89e2c632d5436ca0f8090544bc945"
      },
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "body": "The failure is a real CDDL one. Will fix that up in a separate PR.",
          "createdAt": "2025-03-03T19:54:36Z",
          "updatedAt": "2025-03-03T19:54:36Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 18,
      "id": "PR_kwDOOBS9Ss6NNAgH",
      "title": "Fixup CDDL breakages",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/18",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-03T20:03:23Z",
      "updatedAt": "2025-03-03T20:06:12Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "c1a6db6f2ea89e2c632d5436ca0f8090544bc945",
      "headRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "headRefName": "fix-MOQTServerSetupMessage",
      "headRefOid": "9b72af1cb4cbf436960ab84ea7bcc82a5deb219a",
      "closedAt": "2025-03-03T20:06:12Z",
      "mergedAt": "2025-03-03T20:06:12Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "5c89712698bbdf022cc6cc1a82c65d4bc0e49cb2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 19,
      "id": "PR_kwDOOBS9Ss6NNrpg",
      "title": "Convert reason_phrase to split reason and reason_bytes",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/19",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Closes #15 ",
      "createdAt": "2025-03-03T21:44:54Z",
      "updatedAt": "2025-03-03T21:48:18Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "5c89712698bbdf022cc6cc1a82c65d4bc0e49cb2",
      "headRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "headRefName": "better-reasons",
      "headRefOid": "4f1d9dda842a218308d28f804b312d2c92b08430",
      "closedAt": "2025-03-03T21:48:14Z",
      "mergedAt": "2025-03-03T21:48:14Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "29e844cd48f363fb06f90936837a5c3242987f1e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 20,
      "id": "PR_kwDOOBS9Ss6N6ucc",
      "title": "Define concrete parameters",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/20",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I misunderstood how MOQT's parameers worked when first drafting things up.\r\n\r\nThis change splits the parameter space into the two types defined by MOQT:\r\n\"setup parameters\" and \"paramters\". It then defines the concrete parameters\r\nthat have been defined in the MOQT draft so that its much easier dealing\r\nwith seralization and parsing, rather than having a generic idea of a\r\n\"parameter has bytes\". This is channeling some of the work on\r\nhttps://github.com/moq-wg/moq-transport/pull/761/files but doesn't go all\r\nthe way. I think this design is compatible with all approaches in MOQT\r\npresent or future.\r\n\r\nFor instance, @mengelbart shared with me a prototype log line of form\r\n\r\n```\r\n\u001e{\"time\":0.147859,\"name\":\"moqt:control_message_created\",\"data\":{\"stream_id\":0,\"length\":19,\"message\":{\"type\":\"client_setup\",\"number_of_supported_versions\":1,\"supported_versions\":[4278190088],\"number_of_parameters\":2,\"setup_parameters\":[{\"Type\":1,\"Value\":\"\"},{\"Type\":2,\"Value\":100}]}}}\r\n```\r\n\r\nwith this change, I'd expect it to be\r\n\r\n```\r\n\u001e{\"time\":0.147859,\"name\":\"moqt:control_message_created\",\"data\":{\"stream_id\":0,\"length\":19,\"message\":{\"type\":\"client_setup\",\"number_of_supported_versions\":1,\"supported_versions\":[4278190088],\"number_of_parameters\":2,\"setup_parameters\":[{\"name\":\"path\",\"value\":\"\"},{\"name\":\"max_subscribe_id\",\"value\":100}]}}}\r\n```\r\n",
      "createdAt": "2025-03-10T01:01:27Z",
      "updatedAt": "2025-03-12T00:07:06Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "29e844cd48f363fb06f90936837a5c3242987f1e",
      "headRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "headRefName": "parameters",
      "headRefOid": "db178474c234ad5c112f57562f9a49b17f015222",
      "closedAt": "2025-03-12T00:07:02Z",
      "mergedAt": "2025-03-12T00:07:02Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "8f35362342608012f6ba7bc81e4ac0a85d219b64"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 21,
      "id": "PR_kwDOOBS9Ss6N7RC2",
      "title": "Add MOQTByteString type for track/track namespace and define track_namespace fields",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/21",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "\u2026_namespace fields\r\n\r\nA proposal to close https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/issues/14\r\n\r\nThe difficulty with MOQT is it allows these track things to be \"bytes\", which may or may not be safely encoded as regular strings. Previously, I proposed RawInfo for track_name fields. @mengelbart provided an example log line and I don't think its very ergonomic\r\n\r\n```\r\n\u001e{\"time\":0.962961,\"name\":\"moqt:control_message_created\",\"data\":{\"stream_id\":0,\"length\":22,\"message\":{\"type\":\"subscribe\",\"subscribe_id\":0,\"track_alias\":0,\"track_namespace\":[\"clock\"],\"track_name\":{\"length\":6,\"payload_length\":6,\"data\":\"7365636f6e64\"},\"subscriber_priority\":0,\"group_order\":0,\"filter_type\":0,\"number_of_parameters\":0}}}\r\n```\r\n\r\nThe raw info's `\"data\":\"7365636f6e64\"` is a hexstring encoding of the value `second`. If the log producer is happy to encode as a string, it can. If its not happy to, it can use hexstring. Using rawinfo doesn't seem to add much value here unless you wanted to omit the actual value and just record the length, but I really don't see that being useful in MOQ.\r\n\r\nSo instead, with this proposal a log line would include\r\n\r\n```\r\n\"track_name\": {\"value\": \"second\"}\r\n```\r\n\r\nthat's still verbose but then allows someone sending binary track names to so something like \r\n\r\n```\r\n\"track_name\": {\"value_bytes\": \"<hex-encoded binary thing>\"}\r\n```\r\n\r\nThis then extends to the track_namespace field, which could be something like\r\n\r\n```\r\n\"track_namespace\": [{\"value_bytes\": \"<hex-encoded binary thing>\"}, {\"value\": \"second\"}]\r\n```",
      "createdAt": "2025-03-10T03:30:17Z",
      "updatedAt": "2025-03-12T00:13:46Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "8f35362342608012f6ba7bc81e4ac0a85d219b64",
      "headRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "headRefName": "namespaces",
      "headRefOid": "16571786ef744624c99e23c57461ab11b2c49cc5",
      "closedAt": "2025-03-12T00:13:43Z",
      "mergedAt": "2025-03-12T00:13:43Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "0619e9d87579048a2e3f8f0570eb91a221d62c04"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 24,
      "id": "PR_kwDOOBS9Ss6OagL9",
      "title": "Align parameter field names with MOQT spec",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/24",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Closes #22 ",
      "createdAt": "2025-03-12T22:10:59Z",
      "updatedAt": "2025-03-15T14:19:54Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "0619e9d87579048a2e3f8f0570eb91a221d62c04",
      "headRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "headRefName": "parameter-field-names",
      "headRefOid": "040648ce11cbf4e8faad560e83133a130aee4f46",
      "closedAt": "2025-03-15T14:19:54Z",
      "mergedAt": "2025-03-15T14:19:54Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "da1b175d36d6dda538ca4a43ceacd88ad89af1e8"
      },
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "OWNER",
          "body": "The MOQT might change these again but let's just move ahead and deal with that later.",
          "createdAt": "2025-03-13T18:35:30Z",
          "updatedAt": "2025-03-13T18:35:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOOBS9Ss6f26QT",
          "commit": {
            "abbreviatedOid": "040648c"
          },
          "author": "mengelbart",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-13T13:42:36Z",
          "updatedAt": "2025-03-13T13:42:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 25,
      "id": "PR_kwDOOBS9Ss6OaguS",
      "title": "Fix event name type",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/25",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-12T22:12:48Z",
      "updatedAt": "2025-03-13T18:34:38Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "0619e9d87579048a2e3f8f0570eb91a221d62c04",
      "headRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "headRefName": "unsubscribe_announces-typo",
      "headRefOid": "b5005a0bce80119a0f0f4e76b079177c8a48ca20",
      "closedAt": "2025-03-13T18:34:34Z",
      "mergedAt": "2025-03-13T18:34:34Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "279cf7156307fca5adad824c53ffdeca9bface89"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOOBS9Ss6f26dH",
          "commit": {
            "abbreviatedOid": "b5005a0"
          },
          "author": "mengelbart",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-13T13:42:49Z",
          "updatedAt": "2025-03-13T13:42:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 26,
      "id": "PR_kwDOOBS9Ss6OaiS3",
      "title": "Add control value to MOQTStreamType",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/26",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Closes #13 ",
      "createdAt": "2025-03-12T22:16:53Z",
      "updatedAt": "2025-03-13T18:34:09Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "0619e9d87579048a2e3f8f0570eb91a221d62c04",
      "headRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "headRefName": "control-stream-type",
      "headRefOid": "2d367d23708ff384443e4cdc1caa81eee0c2f499",
      "closedAt": "2025-03-13T18:34:06Z",
      "mergedAt": "2025-03-13T18:34:06Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "ff9382048694499b515e39b6de7ca20b45c27027"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOOBS9Ss6f26zJ",
          "commit": {
            "abbreviatedOid": "2d367d2"
          },
          "author": "mengelbart",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-13T13:43:10Z",
          "updatedAt": "2025-03-13T13:43:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 27,
      "id": "PR_kwDOOBS9Ss6OalDD",
      "title": "Remove excessive citation of the same qlog main schema section",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/27",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-12T22:25:03Z",
      "updatedAt": "2025-03-13T18:33:31Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "0619e9d87579048a2e3f8f0570eb91a221d62c04",
      "headRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "headRefName": "remove-excessive-citation",
      "headRefOid": "3067ea141737329002925fe1df009d7baf802a41",
      "closedAt": "2025-03-13T18:33:30Z",
      "mergedAt": "2025-03-13T18:33:30Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "101011f8b985a7a63eb5d7e912692b8a3177f6b5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOOBS9Ss6f27BB",
          "commit": {
            "abbreviatedOid": "3067ea1"
          },
          "author": "mengelbart",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-13T13:43:24Z",
          "updatedAt": "2025-03-13T13:43:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 30,
      "id": "PR_kwDOOBS9Ss6OzkLg",
      "title": "s/number_of_support_versions/number_of_supported_versions",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/30",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Closes #29\r\n",
      "createdAt": "2025-03-16T04:01:25Z",
      "updatedAt": "2025-03-17T01:06:43Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "da1b175d36d6dda538ca4a43ceacd88ad89af1e8",
      "headRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "headRefName": "add-ed",
      "headRefOid": "ce5960e89d20609fb38c140eff1593496b786e38",
      "closedAt": "2025-03-17T01:06:42Z",
      "mergedAt": "2025-03-17T01:06:42Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "c540453a840bb5e9e166b745ae545fc589fda9bf"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 31,
      "id": "PR_kwDOOBS9Ss6O2DCG",
      "title": "make message parameters an optional field",
      "url": "https://github.com/LPardue/draft-pardue-moq-qlog-moq-events/pull/31",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Closes #28 \r\n\r\nAfter sleeping on it and speaking more with @mengelbart, we prefer log brevity and feel that making this optional is the most straightforward thing. (pave the cow paths and all)",
      "createdAt": "2025-03-17T02:22:35Z",
      "updatedAt": "2025-03-17T02:24:04Z",
      "baseRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "baseRefName": "main",
      "baseRefOid": "c540453a840bb5e9e166b745ae545fc589fda9bf",
      "headRepository": "LPardue/draft-pardue-moq-qlog-moq-events",
      "headRefName": "optional-params",
      "headRefOid": "c166a8fa72a246ceef469c15d67d973be5d822b1",
      "closedAt": "2025-03-17T02:24:04Z",
      "mergedAt": "2025-03-17T02:24:04Z",
      "mergedBy": "LPardue",
      "mergeCommit": {
        "oid": "bcafea074072a88a3e0e2f1c5e9053dd63ac49e9"
      },
      "comments": [],
      "reviews": []
    }
  ]
}