



Media Over QUIC                                                L. Pardue
Internet-Draft                                                Cloudflare
Intended status: Informational                              M. Engelbart
Expires: 3 September 2025                 Technical University of Munich
                                                            2 March 2025


                       MoQ qlog event definitions
                draft-pardue-moq-qlog-moq-events-latest

Abstract

   This document defines a qlog event schema containing concrete events
   for MoQ.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://LPardue.github.io/draft-pardue-moq-qlog-moq-events/draft-
   pardue-moq-qlog-moq-events.html.  Status information for this
   document may be found at https://datatracker.ietf.org/doc/draft-
   pardue-moq-qlog-moq-events/.

   Discussion of this document takes place on the Media Over QUIC
   mailing list (mailto:moq@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/moq/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/moq/.

   Source for this draft and an issue tracker can be found at
   https://github.com/LPardue/draft-pardue-moq-qlog-moq-events.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 3 September 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Usage with QUIC
   2.  Conventions and Definitions
   3.  Event Schema Definition
     3.1.  Draft Event Schema Identification
   4.  MOQT Events
     4.1.  control_message_created
     4.2.  control_message_parsed
     4.3.  stream_type_set
     4.4.  object_datagram_created
     4.5.  object_datagram_parsed
     4.6.  object_datagram_status_created
     4.7.  object_datagram_status_parsed
     4.8.  subgroup_header_created
     4.9.  subgroup_header_parsed
     4.10. subgroup_object_created
     4.11. subgroup_object_parsed
     4.12. fetch_header_created
     4.13. fetch_header_parsed
     4.14. fetch_object_created
     4.15. fetch_object_parsed
   5.  MOQT Data Type Definitions
     5.1.  Owner
     5.2.  MOQTParameter
     5.3.  MOQTControlMessage
       5.3.1.  MOQTClientSetupMessage
       5.3.2.  MOQTServerSetupMessage
       5.3.3.  MOQTGoaway
       5.3.4.  MOQTSubscribe
       5.3.5.  MOQTSubscribeUpdate
       5.3.6.  MOQTUnsubscribe
       5.3.7.  MOQTFetch
       5.3.8.  MOQTFetchCancel
       5.3.9.  MOQTAnnounceOk
       5.3.10. MOQTAnnounceError
       5.3.11. MOQTAnnounceCancel
       5.3.12. MOQTTrackStatusRequest
       5.3.13. MOQTSubscribeAnnounces
       5.3.14. MOQTUnsubscribeAnnounces
       5.3.15. MOQTSubscribeOk
       5.3.16. MOQTSubscribeError
       5.3.17. MOQTFetchOk
       5.3.18. MOQTFetchError
       5.3.19. MOQTSubscribeDone
       5.3.20. MOQTMaxSubscribeId
       5.3.21. MOQTSubscribesBlocked
       5.3.22. MOQTAnnounce
       5.3.23. MOQTUnannounce
       5.3.24. MOQTTrackStatus
       5.3.25. MOQTSubscribeAnnouncesOk
       5.3.26. MOQTSubscribeAnnouncesError
     5.4.  MOQTExtensionHeader
   6.  Security Considerations
   7.  IANA Considerations
   8.  Normative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   This document defines a qlog event schema (Section 8 of [QLOG-MAIN])
   containing concrete events for Media over QUIC Transport [MOQT].

   The event namespace with identifier moqt is defined; see Section 3.
   In this namespace multiple events derive from the qlog abstract Event
   class (Section 7 of [QLOG-MAIN]), each extending the "data" field and
   defining their "name" field values and semantics.

   Table 1 summarizes the name value of each event type that is defined
   in this specification.  Some event data fields use complex data
   types.  These are represented as enums or re-usable definitions,
   which are grouped together on the bottom of this document for
   clarity.

    +=====================================+============+==============+
    | Name value                          | Importance | Definition   |
    +=====================================+============+==============+
    | moqt:control_message_created        | Core       | Section 4.1  |
    +-------------------------------------+------------+--------------+
    | moqt:control_message_parsed         | Core       | Section 4.2  |
    +-------------------------------------+------------+--------------+
    | moqt:stream_type_set                | Core       | Section 4.3  |
    +-------------------------------------+------------+--------------+
    | moqt:object_datagram_created        | Core       | Section 4.4  |
    +-------------------------------------+------------+--------------+
    | moqt:object_datagram_parsed         | Core       | Section 4.5  |
    +-------------------------------------+------------+--------------+
    | moqt:object_datagram_status_created | Core       | Section 4.6  |
    +-------------------------------------+------------+--------------+
    | moqt:object_datagram_status_parsed  | Core       | Section 4.7  |
    +-------------------------------------+------------+--------------+
    | moqt:subgroup_header_created        | Core       | Section 4.8  |
    +-------------------------------------+------------+--------------+
    | moqt:subgroup_header_parsed         | Core       | Section 4.9  |
    +-------------------------------------+------------+--------------+
    | moqt:subgroup_object_created        | Core       | Section 4.10 |
    +-------------------------------------+------------+--------------+
    | moqt:subgroup_object_parsed         | Core       | Section 4.11 |
    +-------------------------------------+------------+--------------+
    | moqt:fetch_header_created           | Core       | Section 4.12 |
    +-------------------------------------+------------+--------------+
    | moqt:fetch_header_parsed            | Core       | Section 4.13 |
    +-------------------------------------+------------+--------------+
    | moqt:fetch_object_created           | Core       | Section 4.14 |
    +-------------------------------------+------------+--------------+
    | moqt:fetch_object_parsed            | Core       | Section 4.15 |
    +-------------------------------------+------------+--------------+

                            Table 1: MOQT Events

   When any event from this document is included in a qlog trace, the
   "protocol_types" qlog array field MUST contain an entry with the
   value "MOQT":

   $ProtocolType /= "MOQT"

                 Figure 1: ProtocolType extension for MOQT

1.1.  Usage with QUIC

   The events described in this document can be used with or without
   logging the related QUIC events defined in [QLOG-QUIC].  If used with
   QUIC events, the QUIC document takes precedence in terms of
   recommended filenames and trace separation setups.

   If used without QUIC events, it is recommended that the
   implementation assign a globally unique identifier to each MOQT
   session.  This ID can then be used as the value of the qlog
   "group_id" field, as well as the qlog filename or file identifier,
   potentially suffixed by the vantagepoint type (For example,
   abcd1234_server.qlog would contain the server-side trace of the
   connection with GUID abcd1234).

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   The event and data structure definitions in ths document are
   expressed in the Concise Data Definition Language [CDDL] and its
   extensions described in [QLOG-MAIN].

   The following fields from [QLOG-MAIN] are imported and used: name,
   namespace, type, data, group_id, protocol_types, importance, RawInfo,
   and time-related fields.

   As is the case for [QLOG-MAIN], the qlog schema definitions in this
   document are intentionally agnostic to serialization formats.  The
   choice of format is an implementation decision.

3.  Event Schema Definition

   This document describes how the MOQT protocol is expressed in qlog
   with an event schema.  Per the requirements in Section 8 of
   [QLOG-MAIN], this document registers the moqt namespace.  The event
   schema URI is urn:ietf:params:qlog:events:moqt.

3.1.  Draft Event Schema Identification

   This section is to be removed before publishing as an RFC.

   Only implementations of the final, published RFC can use the events
   belonging to the event schema with the URI
   urn:ietf:params:qlog:events:moqt.  Until such an RFC exists,
   implementations MUST NOT identify themselves using this URI.

   Implementations of draft versions of the event schema MUST append the
   string "-" and the corresponding draft number to the URI.  For
   example, draft 99 of this document is identified using the URI
   urn:ietf:params:qlog:events:moqt-99.

   The namespace identifier itself is not affected by this requirement.

4.  MOQT Events

   MOQT events extend the $ProtocolEventData extension point defined in
   [QLOG-MAIN].  Additionally, they allow for direct extensibility by
   their use of per-event extension points via the $$ CDDL "group
   socket" syntax, as also described in [QLOG-MAIN].

   MOQTEventData = MOQTControlMessageCreated /
                   MOQTControlMessageParsed /
                   MOQTStreamTypeSet /
                   MOQTObjectDatagramCreated /
                   MOQTObjectDatagramParsed /
                   MOQTObjectDatagramStatusCreated /
                   MOQTObjectDatagramStatusParsed /
                   MOQTSubgroupHeaderCreated /
                   MOQTSubgroupHeaderParsed /
                   MOQTSubgroupObjectCreated /
                   MOQTSubgroupObjectParsed /
                   MOQTFetchHeaderCreated /
                   MOQTFetchHeaderParsed /
                   MOQTFetchObjectCreated /
                   MOQTFetchObjectParsed

   $ProtocolEventData /= MOQTEventData

     Figure 2: MOQTEventData definition and ProtocolEventData extension

   MOQT events are logged when a certain condition happens at the
   application layer, and there isn't always a one to one mapping
   between HTTP and QUIC events.  The exchange of data between the HTTP
   and QUIC layer is logged via the "stream_data_moved" and
   "datagram_data_moved" events in [QLOG-QUIC].

   The concrete MOQT event types are further defined below, their type
   identifier is the heading name.

4.1.  control_message_created

   The control_message_created event is emitted when a control message
   is created.  It has Core importance level; see Section 9.2 of
   [QLOG-MAIN].

   The definition of control message content is in Section 5.3.

   MOQTControlMessageCreated = {
       stream_id: uint64
       ? length: uint64
       message: $MOQTControlMessage
       ? raw: RawInfo

       * $$moqt-controlmessagecreated-extension
   }

               Figure 3: MOQTControlMessageCreated definition

4.2.  control_message_parsed

   The control_message_parsed event is emitted when a control message is
   parsed.  It has Core importance level; see Section 9.2 of
   [QLOG-MAIN].

   The definition of control message content is in Section 5.3.

   MOQTControlMessageParsed = {
       stream_id: uint64
       ? length: uint64
       message: $MOQTControlMessage
       ? raw: RawInfo

       * $$moqt-controlmessageparsed-extension
   }

               Figure 4: MOQTControlMessageParsed definition

4.3.  stream_type_set

   The stream_type_set event conveys when a MOQT stream type becomes
   known.  It has Base importance level; see Section 9.2 of [QLOG-MAIN].

   MOQTStreamTypeSet = {
       ? owner: Owner
       stream_id: uint64
       stream_type: $MOQTStreamType

       * $$moqt-streamtypeset-extension
   }

   $MOQTStreamType /=   "subgroup_header" /
                        "fetch_header"

                   Figure 5: MOQTStreamTypeSet definition

4.4.  object_datagram_created

   The object_datagram_created event is emitted when the OBJECT_DATAGRAM
   message is created.  It has Core importance level; see Section 9.2 of
   [QLOG-MAIN].

   MOQTObjectDatagramCreated = {
       track_alias: uint64
       group_id: uint64
       object_id: uint64
       publisher_priority: uint8
       extension_headers_length: uint64
       ? extension_headers: [* MOQTExtensionHeader]
       object_payload: RawInfo

       * $$moqt-objectdatagramcreated-extension
   }

               Figure 6: MOQTObjectDatagramCreated definition

4.5.  object_datagram_parsed

   The object_datagram_parsed event is emitted when the OBJECT_DATAGRAM
   message is parsed.  It has Core importance level; see Section 9.2 of
   [QLOG-MAIN].

   MOQTObjectDatagramParsed = {
       track_alias: uint64
       group_id: uint64
       object_id: uint64
       publisher_priority: uint8
       extension_headers_length: uint64
       ? extension_headers: [* MOQTExtensionHeader]
       ? object_payload: RawInfo

       * $$moqt-objectdatagramparsed-extension
   }

               Figure 7: MOQTObjectDatagramParsed definition

4.6.  object_datagram_status_created

   The object_datagram_status_created event is emitted when the
   OBJECT_DATAGRAM_STATUS message is created.  It has Core importance
   level; see Section 9.2 of [QLOG-MAIN].

   MOQTObjectDatagramStatusCreated = {
       track_alias: uint64
       group_id: uint64
       object_id: uint64
       publisher_priority: uint8
       extension_headers_length: uint64
       ? extension_headers: [* MOQTExtensionHeader]
       object_status: uint64

       * $$moqt-objectdatagramstatuscreated-extension
   }

            Figure 8: MOQTObjectDatagramStatusCreated definition

4.7.  object_datagram_status_parsed

   The object_datagram_status_parsed event is emitted when the
   OBJECT_DATAGRAM_STATUS message is parsed.  It has Core importance
   level; see Section 9.2 of [QLOG-MAIN].

   MOQTObjectDatagramStatusParsed = {
       track_alias: uint64
       group_id: uint64
       object_id: uint64
       publisher_priority: uint8
       extension_headers_length: uint64
       ? extension_headers: [* MOQTExtensionHeader]
       object_status: uint64

       * $$moqt-objectdatagramstatusparsed-extension
   }

            Figure 9: MOQTObjectDatagramStatusParsed definition

4.8.  subgroup_header_created

   The subgroup_header_created event is emitted when a stream begins and
   a SUBGROUP_HEADER is created.  It has Core importance level; see
   Section 9.2 of [QLOG-MAIN].

   MOQTSubgroupHeaderCreated = {
       stream_id: uint64
       track_alias: uint64
       group_id: uint64
       subgroup_id: uint64
       publisher_priority: uint8

       * $$moqt-subgroupheadercreated-extension
   }

              Figure 10: MOQTSubgroupHeaderCreated definition

4.9.  subgroup_header_parsed

   The subgroup_header_parsed event is emitted when the SUBGROUP_HEADER
   is parsed.  It has Core importance level; see Section 9.2 of
   [QLOG-MAIN].

   MOQTSubgroupHeaderParsed = {
       stream_id: uint64
       track_alias: uint64
       group_id: uint64
       subgroup_id: uint64
       publisher_priority: uint8

       * $$moqt-subgroupheaderparsed-extension
   }

               Figure 11: MOQTSubgroupHeaderParsed definition

4.10.  subgroup_object_created

   The subgroup_object_created event is emitted when a subgroup object
   is created.  It has Core importance level; see Section 9.2 of
   [QLOG-MAIN].

   MOQTSubgroupObjectCreated = {
       stream_id: uint64
       ? group_id: uint64
       ? subgroup_id: uint64
       object_id: uint64
       extension_headers_length: uint64
       ? extension_headers: [* MOQTExtensionHeader]
       object_payload_length: uint64
       ? object_status: uint64
       ? object_payload: RawInfo

       * $$moqt-subgroupobjectcreated-extension
   }

              Figure 12: MOQTSubgroupObjectCreated definition

4.11.  subgroup_object_parsed

   The subgroup_object_parsed event is emitted when a subgroup object is
   parsed.  It has Core importance level; see Section 9.2 of
   [QLOG-MAIN].

   MOQTSubgroupObjectParsed = {
       stream_id: uint64
       ? group_id: uint64
       ? subgroup_id: uint64
       object_id: uint64
       extension_headers_length: uint64
       ? extension_headers: [* MOQTExtensionHeader]
       object_payload_length: uint64
       ? object_status: uint64
       ? object_payload: RawInfo

       * $$moqt-subgroupobjectparsed-extension
   }

               Figure 13: MOQTSubgroupObjectParsed definition

4.12.  fetch_header_created

   The fetch_header_created event is emitted when a stream begins and a
   FETCH_HEADER is created.  It has Core importance level; see
   Section 9.2 of [QLOG-MAIN].

   MOQTFetchHeaderCreated = {
       stream_id: uint64
       subscribe_id: uint64

       * $$moqt-fetchheadercreated-extension
   }

                Figure 14: MOQTFetchHeaderCreated definition

4.13.  fetch_header_parsed

   The fetch_header_parsed event is emitted when the SUBGROUP_HEADER is
   parsed.  It has Core importance level; see Section 9.2 of
   [QLOG-MAIN].

   MOQTFetchHeaderParsed = {
       stream_id: uint64
       subscribe_id: uint64

       * $$moqt-fetchheaderparsed-extension
   }

                Figure 15: MOQTFetchHeaderParsed definition

4.14.  fetch_object_created

   The fetch_object_created event is emitted when a fetch object is
   created.  It has Core importance level; see Section 9.2 of
   [QLOG-MAIN].

   MOQTFetchObjectCreated = {
       stream_id: uint64
       group_id: uint64
       subgroup_id: uint64
       object_id: uint64
       publisher_priority: uint8
       extension_headers_length: uint64
       ? extension_headers: [* MOQTExtensionHeader]
       object_payload_length: uint64
       ? object_status: uint64
       ? object_payload: RawInfo

       * $$moqt-fetchobjectcreated-extension
   }

                Figure 16: MOQTFetchObjectCreated definition

4.15.  fetch_object_parsed

   The fetch_object_parsed event is emitted when a fetch object is
   parsed.  It has Core importance level; see Section 9.2 of
   [QLOG-MAIN].

   MOQTFetchObjectParsed = {
       stream_id: uint64
       group_id: uint64
       subgroup_id: uint64
       object_id: uint64
       publisher_priority: uint8
       extension_headers_length: uint64
       ? extension_headers: [* MOQTExtensionHeader]
       object_payload_length: uint64
       ? object_status: uint64
       ? object_payload: RawInfo

       * $$moqt-fetchobjectparsed-extension
   }

                Figure 17: MOQTFetchObjectParsed definition

5.  MOQT Data Type Definitions

   The following data type definitions can be used in MOQT events.

5.1.  Owner

   Owner = "local" /
           "remote"

                        Figure 18: Owner definition

5.2.  MOQTParameter

   MOQTParameter = {
     name: $MOQTParameterName
     length: uint64
     ? value: RawInfo
   }

   $MOQTParameterName /= "authorization_info" /
                       "delivery_timeout" /
                       "max_cache_duration" /
                       "path" /
                       "max_subscribe_id"

                    Figure 19: MOQTParameter definition

5.3.  MOQTControlMessage

   The generic $MOQTControlMessage is defined here as a CDDL "type
   socket" extension point.  It can be extended to support additional
   MOQT control message types.

   ; The MOQTControlMessage is any key-value map (e.g., JSON object)
   $MOQTControlMessage /= {
       * text => any
   }

            Figure 20: MOQTControlMessage type socket definition

   The MOQT control message types defined in this document are as
   follows:

   MOQTBaseControlMessages = MOQTClientSetupMessage /
                             MOQTServerSetupMessage /
                             MOQTGoaway /
                             MOQTSubscribe /
                             MOQTSubscribeUpdate /
                             MOQTUnsubscribe /
                             MOQTFetch /
                             MOQTFetchCancel /
                             MOQTAnnounceOk /
                             MOQTAnnounceError /
                             MOQTAnnounceCancel /
                             MOQTTrackStatusRequest /
                             MOQTSubscribeAnnounces /
                             MOQTUnsubscribeAnnounces /
                             MOQTSubscribeOk /
                             MOQTSubscribeError /
                             MOQTFetchOk /
                             MOQTFetchError /
                             MOQTSubscribeDone /
                             MOQTMaxSubscribeId /
                             MOQTSubscribesBlocked /
                             MOQTAnnounce /
                             MOQTUnannounce /
                             MOQTTrackStatus /
                             MOQTSubscribeAnnouncesOk /
                             MOQTSubscribeAnnouncesError

   $MOQTControlMessage /= MOQTBaseControlMessages

               Figure 21: MOQTBaseControlMessages definition

5.3.1.  MOQTClientSetupMessage

   MOQTClientSetupMessage = {
     type: "client_setup"
     number_of_support_versions: uint64
     supported_versions: [* uint64]
     number_of_parameters: uint64
     setup_parameters: [* MOQTParameter]
   }

                Figure 22: MOQTClientSetupMessage definition

5.3.2.  MOQTServerSetupMessage

   MOQTClientSetupMessage = {
     type: "server_setup"
     selected_version: uint64
     number_of_parameters: uint64
     setup_parameters: [* MOQTParameter]
   }

                Figure 23: MOQTServerSetupMessage definition

5.3.3.  MOQTGoaway

   MOQTGoaway = {
     type: "goaway"
     ? length: uint64
     new_session_uri: RawInfo
   }

                      Figure 24: MOQTGoaway definition

5.3.4.  MOQTSubscribe

   MOQTSubscribe = {
     type: "subscribe"
     subscribe_id: uint64
     track_alias: uint64
     track_namespace: TODO pending tuple decision
     track_name: RawInfo
     subscriber_priority: uint8
     group_order: uint8
     filter_type: uint64
     ? start_group: uint64
     ? start_object: uint64
     ? end_group: uint64
     number_of_parameters: uint64
     subscribe_parameters: [* MOQTParameter]
   }

                    Figure 25: MOQTSubscribe definition

5.3.5.  MOQTSubscribeUpdate

   MOQTSubscribeUpdate = {
     type: "subscribe_update"
     subscribe_id: uint64
     start_group: uint64
     start_object: uint64
     end_group: uint64
     subscriber_priority: uint8
     number_of_parameters: uint64
     subscribe_parameters: [* MOQTParameter]
   }

                 Figure 26: MOQTSubscribeUpdate definition

5.3.6.  MOQTUnsubscribe

   MOQTUnsubscribe = {
     type: "unsubscribe"
     subscribe_id: uint64
   }

                   Figure 27: MOQTUnsubscribe definition

5.3.7.  MOQTFetch

   MOQTFetch = {
     type: "fetch"
     subscribe_id: uint64
     subscriber_priority: uint8
     group_order: uint8
     fetch_type: uint64

     ? track_namespace: TODO pending tuple decision
     ? track_name: RawInfo
     ? start_group: uint64
     ? start_object: uint64
     ? end_group: uint64
     ? end_object: uint64

     ? joining_subscribe_id: uint64
     ? preceding_group_offset: uint64

     number_of_parameters: uint64
     parameters: [* MOQTParameter]

   }

                      Figure 28: MOQTFetch definition

5.3.8.  MOQTFetchCancel

   MOQTFetchCancel = {
     type: "fetch_cancel"
     subscribe_id: uint64
   }

                   Figure 29: MOQTFetchCancel definition

5.3.9.  MOQTAnnounceOk

   MOQTAnnounceOk = {
     type: "announce_ok"
     track_namespace: TODO pending tuple decision
   }

                    Figure 30: MOQTAnnounceOk definition

5.3.10.  MOQTAnnounceError

   MOQTAnnounceError = {
     type: "announce_error"
     track_namespace: TODO pending tuple decision
     error_code: unit64
     reason_phrase: RawInfo
   }

                  Figure 31: MOQTAnnounceError definition

5.3.11.  MOQTAnnounceCancel

   MOQTAnnounceCancel = {
     type: "announce_cancel"
     track_namespace: TODO pending tuple decision
     error_code: unit64
     reason_phrase: RawInfo
   }

                  Figure 32: MOQTAnnounceCancel definition

5.3.12.  MOQTTrackStatusRequest

   MOQTTrackStatusRequest = {
     type: "track_status_request"
     track_namespace: TODO pending tuple decision
     track_name: RawInfo
   }

                Figure 33: MOQTTrackStatusRequest definition

5.3.13.  MOQTSubscribeAnnounces

   MOQTSubscribeAnnounces = {
     type: "subscribe_announces"
     track_namespace: TODO pending tuple decision
     number_of_parameters: uint64
     subscribe_parameters: [* MOQTParameter]
   }

                Figure 34: MOQTSubscribeAnnounces definition

5.3.14.  MOQTUnsubscribeAnnounces

   MOQTUnsubscribeAnnounces = {
     type: "subscribe_announces"
     track_namespace: TODO pending tuple decision
   }

               Figure 35: MOQTUnsubscribeAnnounces definition

5.3.15.  MOQTSubscribeOk

   MOQTSubscribeOk = {
     type: "subscribe_ok"
     subscribe_id: uint64
     expires: uint64
     group_order: uint8
     content_exists: uint8
     ? largest_group_id: uint64
     ? largest_object_id: uint64
     number_of_parameters: uint64
     subscribe_parameters: [* MOQTParameter]
   }

                   Figure 36: MOQTSubscribeOk definition

5.3.16.  MOQTSubscribeError

   MOQTSubscribeError = {
     type: "subscribe_error"
     subscribe_id: uint64
     error_code: unit64
     reason_phrase: RawInfo
     track_alias: uint64
   }

                  Figure 37: MOQTSubscribeError definition

5.3.17.  MOQTFetchOk

   MOQTFetchOk = {
     type: "fetch_ok"
     subscribe_id: uint64
     group_order: uint8
     end_of_track: uint8
     largest_group_id: uint64
     largest_object_id: uint64
     number_of_parameters: uint64
     subscribe_parameters: [* MOQTParameter]
   }

                     Figure 38: MOQTFetchOk definition

5.3.18.  MOQTFetchError

   MOQTFetchError = {
     type: "fetch_error"
     subscribe_id: uint64
     error_code: unit64
     reason_phrase: RawInfo
   }

                    Figure 39: MOQTFetchError definition

5.3.19.  MOQTSubscribeDone

   MOQTSubscribeDone = {
     type: "subscribe_done"
     subscribe_id: uint64
     status_code: unit64
     stream_count: unit64
     reason_phrase: RawInfo
   }

                  Figure 40: MOQTSubscribeDone definition

5.3.20.  MOQTMaxSubscribeId

   MOQTMaxSubscribeId = {
     type: "max_subscribe_id"
     subscribe_id: uint64
   }

                  Figure 41: MOQTMaxSubscribeId definition

5.3.21.  MOQTSubscribesBlocked

   MOQTSubscribesBlocked = {
     type: "subscribes_blocked"
     maximum_subscribe_id: uint64
   }

                Figure 42: MOQTSubscribesBlocked definition

5.3.22.  MOQTAnnounce

   MOQTAnnounce = {
     type: "announce"
     track_namespace: TODO pending tuple decision
     number_of_parameters: uint64
     subscribe_parameters: [* MOQTParameter]
   }

                     Figure 43: MOQTAnnounce definition

5.3.23.  MOQTUnannounce

   MOQTUnannounce = {
     type: "unannounce"
     track_namespace: TODO pending tuple decision
   }

                     Figure 44: MOQTAnnounce definition

5.3.24.  MOQTTrackStatus

   MOQTTrackStatus = {
     type: "track_status"
     track_namespace: TODO pending tuple decision
     track_name: RawInfo
     status_code: uint64
     last_group_id: uint64
     last_object_id: uint64
   }

                   Figure 45: MOQTTrackStatus definition

5.3.25.  MOQTSubscribeAnnouncesOk

   MOQTSubscribeAnnouncesOk = {
     type: "subscribe_announces_ok"
     track_namespace: TODO pending tuple decision
   }

               Figure 46: MOQTSubscribeAnnouncesOk definition

5.3.26.  MOQTSubscribeAnnouncesError

   MOQTSubscribeAnnouncesError = {
     type: "subscribe_announces_error"
     track_namespace: TODO pending tuple decision
     error_code: uint64
     reason_phrase: RawInfo
   }

             Figure 47: MOQTSubscribeAnnouncesError definition

5.4.  MOQTExtensionHeader

   MOQTExtensionHeader = {
     header_type: uint64
     ? header_value: uint64
     ? header_length: uint64
     ? payload: RawInfo
   }

                   Figure 48: Extension Header definition

6.  Security Considerations

   TODO Security

7.  IANA Considerations

   This document has no IANA actions.

8.  Normative References

   [CDDL]     Birkholz, H., Vigano, C., and C. Bormann, "Concise Data
              Definition Language (CDDL): A Notational Convention to
              Express Concise Binary Object Representation (CBOR) and
              JSON Data Structures", RFC 8610, DOI 10.17487/RFC8610,
              June 2019, <https://www.rfc-editor.org/rfc/rfc8610>.

   [MOQT]     Curley, L., Pugin, K., Nandakumar, S., Vasiliev, V., and
              I. Swett, "Media over QUIC Transport", Work in Progress,
              Internet-Draft, draft-ietf-moq-transport-09, 1 March 2025,
              <https://datatracker.ietf.org/doc/html/draft-ietf-moq-
              transport-09>.

   [QLOG-MAIN]
              Marx, R., Niccolini, L., Seemann, M., and L. Pardue,
              "qlog: Structured Logging for Network Protocols", Work in
              Progress, Internet-Draft, draft-ietf-quic-qlog-main-
              schema-10, 21 October 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
              qlog-main-schema-10>.

   [QLOG-QUIC]
              Marx, R., Niccolini, L., Seemann, M., and L. Pardue, "QUIC
              event definitions for qlog", Work in Progress, Internet-
              Draft, draft-ietf-quic-qlog-quic-events-09, 21 October
              2024, <https://datatracker.ietf.org/doc/html/draft-ietf-
              quic-qlog-quic-events-09>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Lucas Pardue
   Cloudflare
   Email: lucas@lucaspardue.com


   Mathis Engelbart
   Technical University of Munich
   Email: mathis.engelbart@gmail.com
